#include <Wire.h>
#include <LiquidCrystal_I2C.h>


LiquidCrystal_I2C lcd(0x27, 20, 4);  

const int potPin = 34;  
const float maxPotValue = 4095.0;  
const float maxPower = 4400.0;      


float power = 0.0;          
float energyConsumed = 0.0; 
unsigned long lastUpdateTime = 0;  


const unsigned long updateInterval = 1000;


String avaliarConsumo(float energia) {
  if (energia < 0.5) {
    return "Bom";
  } else if (energia < 1.5) {
    return "Elevado";
  } else {
    return "Alto";
  }
}

void setup() {
  Serial.begin(115200);
  lcd.init();
  lcd.backlight();

  lcd.setCursor(0, 0);
  lcd.print("Simulador Iniciado");
  delay(2000);
  lcd.clear();
}

void loop() {
  unsigned long currentTime = millis();
  if (currentTime - lastUpdateTime >= updateInterval) {
    lastUpdateTime = currentTime;
    int potValue = analogRead(potPin);
    power = (potValue / maxPotValue) * maxPower;
    energyConsumed += (power / 1000.0) * (updateInterval / 3600000.0);

    String statusConsumo = avaliarConsumo(energyConsumed);

    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Potencia: ");
    lcd.print(power, 1);  
    lcd.print(" W");

    lcd.setCursor(0, 1);
    lcd.print("Energia: ");
    lcd.print(energyConsumed, 3);
    lcd.print(" kWh");

    lcd.setCursor(0, 2);
    lcd.print("Status: ");
    lcd.print(statusConsumo);  

    lcd.setCursor(0, 3);
    lcd.print("Atualizando...");

    Serial.print("Potencia (W): ");
    Serial.print(power, 1);
    Serial.print(", Energia (kWh): ");
    Serial.print(energyConsumed, 3);
    Serial.print(", Status: ");
    Serial.println(statusConsumo);
  }
}
